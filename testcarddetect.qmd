---
jupyter: python3
---

```{python}
import cv2 as cv
import numpy as np
import matplotlib.pyplot as plt
import random
import math

def classify(im):
    height, width, _ = im.shape
    # wpad=0
    # hpad=0
    # width=width*4
    # height=height*4
    im=cv.resize(im, (250, 120))
    # print(f"{width},{height}")
    wpad=int(width/20)
    hpad=int(height/20)
    cropped_image = im[hpad:height-hpad, wpad:width-wpad]
    # kernel = np.array([[-1,-1,-1], [-1,9,-1], [-1,-1,-1]])
    # cropped_image = cv.filter2D(cropped_image, -1, kernel)
    # cropped_image=cv.GaussianBlur(cropped_image, (5, 5), 0)
    thresh=cv.cvtColor(cropped_image.copy(),cv.COLOR_BGR2GRAY)
    # cv.threshold(cropped_image,63,255,cv.THRESH_BINARY,thresh)
    # thresh=cv.bitwise_not(thresh)
    cv.adaptiveThreshold(thresh, 255, cv.ADAPTIVE_THRESH_GAUSSIAN_C,
                               cv.THRESH_BINARY, 9, 2, thresh)
    contours, hierarchy = cv.findContours(thresh, cv.RETR_TREE, cv.CHAIN_APPROX_SIMPLE)
    area=[]
    for cnt in contours:
        area.append(cv.contourArea(cnt))
    area.sort(reverse=True)
    # print(area)
    # cutoff=0
    # start=area[0]+1
    # for index in range(len(area)-1):
    #     if area[index]/area[index+1]>1.5 or index>20:
    #         if index>=11:
    #             cutoff=area[index+1]
    #             break
    #     if cv.contourArea(cnt)>=(height*width)/12:
    #         start=area[index]
    # print(f"{cutoff},{start}")
    # cv.drawContours(thresh, contours, 1, (128,128,128), int(width/30))
    # fig = plt.figure()
    # plt.imshow(thresh)
    edgecountavg=0
    counter=0
    for cnt in contours:
        curarea=cv.contourArea(cnt)
        if 100<curarea<width*height/4:
            # print(cnt)
            # cv.drawContours(im, [cnt], 0, (128,128,128), int(width/30))
            # mask = np.zeros((height-2*hpad,width-2*wpad,3), np.uint8)
            # cv.drawContours(mask, [cnt], 0, (255,255,255), -1)
            # cv.bitwise_and(cropped_image,mask,cropped_image)
            edgecountavg+=len(cv.approxPolyDP(cnt, 
                                        0.025 * cv.arcLength(cnt, True), True))
            counter+=1
    fig = plt.figure()
    plt.imshow(im)
    background_color=im[wpad][hpad]
    # print(background_color)
    avg_color_per_row = np.average(im, axis=0)
    avg_color = np.average(avg_color_per_row, axis=0)-background_color
    edgecountavg=edgecountavg/counter
    index=np.argmax(avg_color)

    if index==0:
        print(f"Red {index}")
    elif index==1:
        print(f"Green {index}")
    elif index==2:
        print(f"Blue {index}")

    if edgecountavg<5:
        print(f"Diamond {edgecountavg}")
    elif edgecountavg<8:
        print(f"Circle {edgecountavg}")
    else:
        print(f"Squiggle {edgecountavg}")
    
    print(f"{math.ceil(counter/2)} Symbols")
    print("------------------------")

for index in range(21):
    im=cv.imread(f"cards/c{index+1}.jpg")
    classify(im)
```

