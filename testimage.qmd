---
jupyter: python3
---

```{python}
%load_ext autoreload
%autoreload 2
```

```{python}
import numpy as np
import cv2
from v4l2py import Device
import matplotlib.pyplot as plt
with Device.from_id(0) as cam:
    for i, frame in enumerate(cam):
        print(f"frame #{i}: {len(frame)} bytes")
        if i > 9:
            break
frame = cv2.imdecode(np.frombuffer(frame.data, dtype=np.uint8),cv2.IMREAD_COLOR)
plt.imshow(frame)
```

```{python}
#!/usr/bin/env python

import numpy as np
import cv2
import os
import v4l2py
import select

if __name__ == '__main__':
    #cap = cv2.VideoCapture(0)
    #cap.set(cv2.cv.CV_CAP_PROP_FRAME_WIDTH, 1920)      # <-- this doesn't work. OpenCV tries to set VIDIO_S_CROP instead of the frame format
    #cap.set(cv2.cv.CV_CAP_PROP_FRAME_HEIGHT, 1080)
    
    # The following is from: https://github.com/gebart/python-v4l2capture
    
    # Open the video device.
    video = v4l2py.Video_device("/dev/video0")
    
    # Suggest an image size to the device. The device may choose and
    # return another size if it doesn't support the suggested one.
    size_x, size_y = video.set_format(1024, 768, fourcc='MJPG')
    
    print("device chose {0}x{1} res".format(size_x, size_y))
    
    # Create a buffer to store image data in. This must be done before
    # calling 'start' if v4l2capture is compiled with libv4l2. Otherwise
    # raises IOError.
    video.create_buffers(30)
    
    # Send the buffer to the device. Some devices require this to be done
    # before calling 'start'.
    video.queue_all_buffers()
    
    # Start the device. This lights the LED if it's a camera that has one.
    print("start capture")
    video.start()

    while(True):
        #We used to do the following, but it doesn't work :(
        #ret, frame = cap.read()
        
        #Instead...
        
        # Wait for the device to fill the buffer.
        select.select((video,), (), ())

        # The rest is easy :-)
        image_data = video.read_and_queue()
        
        print("decode")
        frame = cv2.imdecode(np.frombuffer(image_data, dtype=np.uint8), cv2.cv.CV_LOAD_IMAGE_COLOR)
    

        cv2.imshow('frame', frame)
        key = cv2.waitKey(1)
        if key & 0xFF == ord('q'):
            break

    #cap.release()
    video.close()
    
    cv2.destroyAllWindows()
```

```{python}
import subprocess
cmd_str = "guvcview -i"
subprocess.run(cmd_str, shell=True)
```

```{python}
import imageio as iio
import matplotlib.pyplot as plt

camera = iio.get_reader("<video0>")
screenshot = camera.get_data(0)
camera.close()

plt.imshow(screenshot)
```

```{python}
from Controller import Controller
import matplotlib.pyplot as plt
ctrl=Controller()
aaa=ctrl.get_image()
print(aaa)
plt.imshow(aaa)
```

```{python}
from Image import Image
from View import View
import cv2 as cv
import matplotlib.pyplot as plt

# colors=["red","green","green","green","green","red","red","purple","purple","red","red","green","green","purple","purple","green","green","red","red","purple","purple","purple","purple"]
# fill=["solid","solid","solid","solid","solid","solid","solid","liquid","liquid","solid","solid","gas","gas","solid","solid","solid","solid","solid","solid","liquid","liquid","gas","gas"]
# shape=["diamond","oval","oval","diamond","diamond","squiggle","squiggle","diamond","diamond","squiggle","squiggle","diamond","diamond","oval","oval","oval","oval","oval","oval","squiggle","squiggle","squiggle","squiggle"]
# number=[2,2,2,1,1,1,1,3,3,3,3,3,3,2,2,1,1,3,3,3,3,1,1]

img=cv.imread("boards/1.jpg")
image=Image(img)
image.create_cards()
# index=0
# for card in image.cards:
#     # card._color=colors[index]
#     # card._fill=fill[index]
#     # card._shape=shape[index]
#     # card._number=number[index]
#     # card._create_comparative()
    # fig = plt.figure()
    # plt.imshow(cv.cvtColor(card._im, cv.COLOR_BGR2RGB))
#     # print(f"{card._color},{card._fill},{card._shape},{card._number}")
#     # print(bin(card.comparative))
#     index+=1
image.find_sets()
print(f"cards: {len(image.cards)},sets: {len(image.get_cards_set())}")
for set in image.get_cards_set():
    print(set)
view=View(img)
view.draw_set_cards(image.sets)
view.show()
```

